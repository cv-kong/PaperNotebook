<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="20.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>*DroneVehical数据集，图像融合</c>
<c></c>
<c></c>
<l>data_dir := 'E:/博士相关/大论文_红外遥感/数据集/DroneVehical/DroneVehical_yolo/'</l>
<c></c>
<l>I_data := data_dir + 'irimg/images/train'</l>
<l>V_data := data_dir + 'valimg/images/train'</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>list_image_files (I_data, 'default', [], irImageFiles)</l>
<l>list_image_files (V_data, 'default', [], valImageFiles)</l>
<c></c>
<l>for Index := 0 to |irImageFiles|-1 by 1</l>
<l>    read_image (irImage, irImageFiles[Index])</l>
<l>    read_image (vaImage, valImageFiles[Index])</l>
<c>    </c>
<l>    decompose3 (vaImage, Image_red, Image_green, Image_blue)</l>
<l>    rgb1_to_gray (irImage, irImage_gray)</l>
<c>    </c>
<l>    compose3 (irImage_gray, Image_green, Image_blue, MultiChannelImage)</l>
<l>    compose4 (irImage_gray, Image_red, Image_green, Image_blue, MultiChannelImage1)</l>
<c>    </c>
<c>    * 直接固定权重相加</c>
<l>    add_image (irImage, vaImage, ImageAdd, 0.5, 0)</l>
<c>    </c>
<l>    illuminate (vaImage, ImageIlluminate, 11, 11, 0.2)</l>
<c>    </c>
<l>    dev_display (ImageAdd)</l>
<l>    stop ()</l>
<l>endfor</l>
<c></c>
<c></c>
<l>Method := 'Deviation'</l>
<c></c>
<l>scale_image_max(Image, Image)</l>
<l>get_image_size(Image, Width, Height)</l>
<c></c>
<c></c>
<c></c>
<c>***** 图像融合评价指标******</c>
<c>**1、entropy(EN)</c>
<l>entropy_gray (Image, ImageAdd, Entropy, Anisotropy)</l>
<c></c>
<c></c>
<c>**2、average gradient(AG) 平均梯度   和Tenegrad函数法类似</c>
<l>sobel_amp (Image, EdgeAmplitude, 'sum_sqrt', 3)</l>
<l>min_max_gray(EdgeAmplitude, EdgeAmplitude, 0, Min, Max, Range)</l>
<l>threshold(EdgeAmplitude, Region1, 11.8, 255)</l>
<l>region_to_bin(Region1, BinImage, 1, 0, Width, Height)</l>
<l>mult_image(EdgeAmplitude, BinImage, ImageResult4, 1, 0)</l>
<l>mult_image(ImageResult4, ImageResult4, ImageResult, 1, 0)</l>
<l>intensity(ImageResult, ImageResult, Value, Deviation)</l>
<c></c>
<c>**3、 standard deviation (SD)方差法</c>
<l>region_to_mean (Image, Image, ImageMean) </l>
<l>convert_image_type (ImageMean, ImageMean, 'real')</l>
<l>convert_image_type (Image, Image, 'real') </l>
<l>sub_image(Image, ImageMean, ImageSub, 1, 0)</l>
<l>mult_image(ImageSub, ImageSub, ImageResult, 1, 0)</l>
<l>intensity(ImageResult, ImageResult, Value, Deviation) </l>
<c></c>
<l>if(Method = 'Deviation')</l>
<c>    *方差法  standard deviation (SD)</c>
<l>    region_to_mean (Image, Image, ImageMean) </l>
<l>    convert_image_type (ImageMean, ImageMean, 'real')</l>
<l>    convert_image_type (Image, Image, 'real') </l>
<l>    sub_image(Image, ImageMean, ImageSub, 1, 0)</l>
<l>    mult_image(ImageSub, ImageSub, ImageResult, 1, 0)</l>
<l>    intensity(ImageResult, ImageResult, Value, Deviation) </l>
<c>    </c>
<l>elseif(Method = 'laplace')</l>
<c>    *拉普拉斯能量函数</c>
<l>    laplace (Image, ImageLaplace4, 'signed', 3, 'n_4')</l>
<l>    laplace (Image, ImageLaplace8, 'signed', 3, 'n_8')</l>
<l>    add_image(ImageLaplace4,ImageLaplace4,ImageResult1, 1, 0)</l>
<l>    add_image(ImageLaplace4,ImageResult1,ImageResult1, 1, 0)</l>
<l>    add_image(ImageLaplace8,ImageResult1,ImageResult1, 1, 0)</l>
<l>    mult_image(ImageResult1, ImageResult1, ImageResult, 1, 0)</l>
<l>    intensity(ImageResult, ImageResult, Value, Deviation)</l>
<c>    </c>
<l>elseif(Method = 'energy')</l>
<c>    *能量梯度函数</c>
<l>    crop_part(Image, ImagePart00, 0, 0, Width-1, Height-1)</l>
<l>    crop_part(Image, ImagePart01, 0, 1, Width-1, Height-1)</l>
<l>    crop_part(Image, ImagePart10, 1, 0, Width-1, Height-1)</l>
<l>    convert_image_type (ImagePart00, ImagePart00, 'real')</l>
<l>    convert_image_type (ImagePart10, ImagePart10, 'real')</l>
<l>    convert_image_type (ImagePart01, ImagePart01, 'real')</l>
<l>    sub_image(ImagePart10, ImagePart00, ImageSub1, 1, 0)</l>
<l>    mult_image(ImageSub1, ImageSub1, ImageResult1, 1, 0)</l>
<l>    sub_image(ImagePart01, ImagePart00, ImageSub2, 1, 0)</l>
<l>    mult_image(ImageSub2, ImageSub2, ImageResult2, 1, 0)</l>
<l>    add_image(ImageResult1, ImageResult2, ImageResult, 1, 0)    </l>
<l>    intensity(ImageResult, ImageResult, Value, Deviation)</l>
<l>elseif(Method = 'Brenner')</l>
<c>    *Brenner函数法</c>
<l>    crop_part(Image, ImagePart00, 0, 0, Width, Height-2)</l>
<l>    convert_image_type (ImagePart00, ImagePart00, 'real')</l>
<l>    crop_part(Image, ImagePart20, 2, 0, Width, Height-2)</l>
<l>    convert_image_type (ImagePart20, ImagePart20, 'real')</l>
<l>    sub_image(ImagePart20, ImagePart00, ImageSub, 1, 0)</l>
<l>    mult_image(ImageSub, ImageSub, ImageResult, 1, 0)</l>
<l>    intensity(ImageResult, ImageResult, Value, Deviation)</l>
<l>elseif(Method = 'Tenegrad')</l>
<c>    *Tenegrad函数法</c>
<l>    sobel_amp (Image, EdgeAmplitude, 'sum_sqrt', 3)</l>
<l>    min_max_gray(EdgeAmplitude, EdgeAmplitude, 0, Min, Max, Range)</l>
<l>    threshold(EdgeAmplitude, Region1, 11.8, 255)</l>
<l>    region_to_bin(Region1, BinImage, 1, 0, Width, Height)</l>
<l>    mult_image(EdgeAmplitude, BinImage, ImageResult4, 1, 0)</l>
<l>    mult_image(ImageResult4, ImageResult4, ImageResult, 1, 0)</l>
<l>    intensity(ImageResult, ImageResult, Value, Deviation)</l>
<c>    </c>
<l>elseif(Method = '2')</l>
<c>    </c>
<l>elseif(Method = '3')</l>
<c>    </c>
<l>endif</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
